# schema.graphql

input SignupInput {
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  phoneNumber: String
  company: String
  profilePicURL: String 
}

type User {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  phoneNumber: String
  company: String
  profilePicURL: String
}

type AuthPayload {
  token: String!
  user: User!
}

type Query {
  me: User!
  getPresignedURL(fileName: String!): String!
  getBills(page: Int!, size: Int!): BillPaginationResult!
}

type BillPaginationResult {
    totalCount: Int!
    bills: [Bill!]
}

type Bill {
    billID: Int!
    company: String!
    createdAt: String!
    totalAmount: Float!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  signup(input: SignupInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  getBillPDF(billID: Int!): String! 
}

type BillItem {
  description: String!
  quantity: Int!
  unitPrice: Float!
  totalPrice: Float!
}

type Payment {
  amount: Float!
  method: String!
  paidAt: String!
}

type UserProfile {
  firstName: String
  lastName: String
  phoneNumber: String
  company: String
}

type BillDetails {
  billID: Int!
  createdAt: String!
  billType: String!
  notes: String
  subtotal: Float
  tax: Float
  discount: Float
  total: Float!
  user: UserProfile!
  items: [BillItem!]!
  payment: Payment
}

extend type Query {
  getBillDetails(billID: Int!): BillDetails!
}
